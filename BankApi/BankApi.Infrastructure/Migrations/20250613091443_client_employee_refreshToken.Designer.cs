// <auto-generated />
using System;
using BankApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankApi.Infrastructure.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20250613091443_client_employee_refreshToken")]
    partial class client_employee_refreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankApi.Domain.Entities.BankBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("BankBranches");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.BankCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BankRecordId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CardNumber")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("CvvCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankRecordId");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.BankRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BankBranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("ClientId");

                    b.ToTable("BankRecords");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("NumberPassport")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SerialPassport")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.ClientCredit", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAccrualPercent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateFinal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Percent")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ClientId", "CreditId");

                    b.HasIndex("CreditId");

                    b.ToTable("ClientCredits");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.ClientDeposit", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepositId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAccrualPercent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateFinal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Percent")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ClientId", "DepositId");

                    b.HasIndex("DepositId");

                    b.ToTable("ClientDeposits");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BankBranchId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date");

                    b.Property<int>("Education")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankBranchId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.PaymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BankRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BankRecordId");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.BankBranch", b =>
                {
                    b.HasOne("BankApi.Domain.Entities.Location", "Location")
                        .WithMany("BankBranches")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.BankCard", b =>
                {
                    b.HasOne("BankApi.Domain.Entities.BankRecord", "BankRecord")
                        .WithMany("BankCards")
                        .HasForeignKey("BankRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankRecord");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.BankRecord", b =>
                {
                    b.HasOne("BankApi.Domain.Entities.BankBranch", "BankBranch")
                        .WithMany("BankRecords")
                        .HasForeignKey("BankBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApi.Domain.Entities.Client", "Client")
                        .WithMany("BankRecords")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankBranch");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.ClientCredit", b =>
                {
                    b.HasOne("BankApi.Domain.Entities.Client", "Client")
                        .WithMany("ClientCredits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApi.Domain.Entities.Credit", "Credit")
                        .WithMany("ClientCredits")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Credit");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.ClientDeposit", b =>
                {
                    b.HasOne("BankApi.Domain.Entities.Client", "Client")
                        .WithMany("ClientDeposits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApi.Domain.Entities.Deposit", "Deposit")
                        .WithMany("ClientDeposits")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Employee", b =>
                {
                    b.HasOne("BankApi.Domain.Entities.BankBranch", "BankBranch")
                        .WithMany("Employees")
                        .HasForeignKey("BankBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankBranch");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.PaymentHistory", b =>
                {
                    b.HasOne("BankApi.Domain.Entities.BankRecord", "BankRecord")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("BankRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankRecord");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.BankBranch", b =>
                {
                    b.Navigation("BankRecords");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.BankRecord", b =>
                {
                    b.Navigation("BankCards");

                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Client", b =>
                {
                    b.Navigation("BankRecords");

                    b.Navigation("ClientCredits");

                    b.Navigation("ClientDeposits");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Credit", b =>
                {
                    b.Navigation("ClientCredits");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Deposit", b =>
                {
                    b.Navigation("ClientDeposits");
                });

            modelBuilder.Entity("BankApi.Domain.Entities.Location", b =>
                {
                    b.Navigation("BankBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
